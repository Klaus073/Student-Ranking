name: Deploy to Staging with Docker

on:
  push:
    branches: [ staging ]

env:
  IMAGE_NAME: 'student-ranking-app'  # Updated to match your compose file
  CONTAINER_NAME: 'ranking-app'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:latest .
        docker tag ${{ env.IMAGE_NAME }}:latest ${{ secrets.REGISTRY_HOST }}/${{ env.IMAGE_NAME }}:latest
        docker tag ${{ env.IMAGE_NAME }}:latest ${{ secrets.REGISTRY_HOST }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    - name: Push to Registry
      run: |
        docker push ${{ secrets.REGISTRY_HOST }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ secrets.REGISTRY_HOST }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    - name: Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_EC2_HOST }}
        username: ${{ secrets.STAGING_EC2_USERNAME }}
        key: ${{ secrets.STAGING_EC2_PRIVATE_KEY }}
        port: ${{ secrets.STAGING_EC2_PORT || 22 }}
        script: |
          # Navigate to the ranking folder
          cd /home/ubuntu/ranking
          
          # Pull the latest image from registry
          docker pull localhost:5000/${{ env.IMAGE_NAME }}:latest
          
          # Stop current containers (docker-compose)
          docker-compose down
          
          # Start containers with the new image
          docker-compose up -d
          
          # Wait for containers to be healthy
          sleep 5
          
          # Check if containers are running
          if docker-compose ps | grep -q "Up"; then
            echo "✅ Deployment successful"
            
            # Clean up old images (keep only current and one previous)
            echo "Cleaning up old Docker images..."
            
            # Get current image ID
            CURRENT_IMAGE=$(docker inspect --format='{{.Id}}' localhost:5000/${{ env.IMAGE_NAME }}:latest)
            
            # Keep only the last 2 images of our app
            docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | \
              grep "localhost:5000/${{ env.IMAGE_NAME }}" | \
              grep -v "latest" | \
              awk '{print $2}' | \
              xargs -r docker rmi -f 2>/dev/null || true
            
            # Remove dangling images
            docker image prune -f
            
            echo "✅ Cleanup complete"
          else
            echo "❌ Deployment failed! Check docker-compose logs"
            docker-compose logs --tail=50
            exit 1
          fi